openapi: 3.0.0
info:
  title: Backbase account domain Api
  version: v1
  contact:
    email: shysunder@gmail.com
    name: shyam sharma
paths:

# Reterive all multiple accounts associated withprovided customer ID
  /api/v1/customer/{custID}/accounts:
    get:
      tags:
        - Accounts
       
      summary: >-  
         customer ID get in URI param its numerical value  ranges  min 8 to 15 max digit. reterive all account details ie. current and saving accounts.
      operationId: 'getCustomerAllAccounts'
      
      parameters:
        - name: custID
          in: path
          required: true
          schema:
            type: integer
            maxLength: 15
            minLength: 8
            
      responses:
        '200':
          $ref: '#/components/responses/currentAccountDetails'
        '400':
           $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unautherize'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
           $ref: '#/components/responses/ServerError'

# Reterive and manage all account with associated particular account number
  /api/v1/accounts/{accountNumber}/saving:
    get:
      tags:
        - Accounts
      summary: >- 
           Get saving account details for linked account number
      operationId: 'getCustomerSavingAccountDetails'
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: integer
            format: int64
            maxLength: 15
            minLength: 10
        #- $ref: '#/components/parameters/accountNumber'
      responses:
        '200':
          $ref: '#/components/responses/SavingAccountResponse'
        '400':
           $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unautherize'
        '404':
          $ref: '#/components/responses/RecordNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
           $ref: '#/components/responses/ServerError'

# Reterive and manage all account with associated particular account number
  /api/v1/accounts/{accountNumber}/current:
    get:
      tags:
        - Accounts
      summary: >- 
           Get current account details for linked account number
      operationId: 'getCustomerCurrentAccountDetails'
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: integer
            format: int64
            maxLength: 15
            minLength: 10
        #- $ref: '#/components/parameters/accountNumber'
      responses:
        '200':
          $ref: '#/components/responses/currentAccountDetails'
        '400':
           $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unautherize'
        '404':
          $ref: '#/components/responses/RecordNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
           $ref: '#/components/responses/ServerError'

#  manage all account with associated particular account number
  /api/v1/accounts/{accountNumber}:
# create fresh account number based on provided input data
    post:
      tags:
        - Accounts
      summary: >-  
        create new account
      operationId: 'createNewAccount'
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: integer
            format: int64
            maxLength: 15
            minLength: 10

      requestBody:
        description: The request body
        content:
          application/json:
            schema:
              anyOf:
              - $ref: '#/components/schemas/CreateNewAccountRequest'
        required: true
        #- $ref: '#/components/parameters/accountNumber'
      responses:
        '201':
          $ref: '#/components/responses/201Response'
        '400':
           $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unautherize'
        '404':
          $ref: '#/components/responses/RecordNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
           $ref: '#/components/responses/ServerError'

# modify existig data by providing account number
    put:
      tags:
        - Accounts
      summary: >-  
        update existing account account
      operationId: 'updateExistingAccount'
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            maxLength: 15
            minLength: 10
            type: integer
            format: int64
        #- $ref: '#/components/parameters/accountNumber'
      responses:
        '201':
          $ref: '#/components/responses/201Response'
        '400':
           $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unautherize'
        '404':
          $ref: '#/components/responses/RecordNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
           $ref: '#/components/responses/ServerError'
           
  # delete provided account number         
    delete:
      tags:
        - Accounts
      summary: >-  
        delete customer existing account
      operationId: 'removeExistingAccount'
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: integer
            format: int64
            maxLength: 15
            minLength: 10
        #- $ref: '#/components/parameters/accountNumber'
      responses:
        '201':
          $ref: '#/components/responses/201Response'
        '400':
           $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unautherize'
        '404':
          $ref: '#/components/responses/RecordNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
           $ref: '#/components/responses/ServerError'
# Reterive transaction history based on date range with 10 record per cycle
  /api/v1/accounts/{accountNumber}/transfer:
    post:
      tags:
        - Accounts
      summary: >-  
        Transfer money from customer linked to Beneficary bank account.
      operationId: 'TransferFunToBeneficaryAccounts'
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: integer
            format: int64
            maxLength: 15
            minLength: 10
      requestBody:
        description: The request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountTransferRequest'
        required: true
            
      responses:
        '201':
          $ref: '#/components/responses/201Response'
        '400':
           $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unautherize'
        '404':
          $ref: '#/components/responses/RecordNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
           $ref: '#/components/responses/ServerError'

# Reterive transaction history based on date range with 10 record per cycle
  /api/v1/accounts/{accountNumber}/current/transactions:
    get:
      tags:
        - Transaction History for current account
      summary: "Gets an array of transactions for on current account , a user owned or linked bank account.The transaction will be returned over a date range and is server side paginated."
      operationId: 'getTransactionHistoryOfCurrentAccount'
      parameters:
        - name: accountNumber
          in: path
          description: The account number containing transactions.
          required: true
          schema:
            maxLength: 15
            minLength: 10
            type: integer
            format: int64
        - name: dateFrom
          in: query
          description: The start date.
          schema:
            type: string
        - name: dateTo
          in: query
          description: The end date.
          schema:
            type: string
        - name: skip
          in: query
          description: The records to skip.
          schema:
            type: integer
            format: int32
            default: 0
        - name: take
          in: query
          description: The number of records per page.
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          $ref: '#/components/responses/currentAccountTransactionHistoryResponse'
        '400':
           $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unautherize'
        '404':
          $ref: '#/components/responses/RecordNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
           $ref: '#/components/responses/ServerError'
# fund transfer from source account to destination 

# Reterive transaction history based on date range with 10 record per cycle
  /api/v1/accounts/{accountNumber}/saving/transactions:
    get:
      tags:
        - Transaction History for Saving account
      summary: "Gets an array of transactions for saving account , a user owned or linked bank account.The transaction will be returned over a date range and is server side paginated."
      operationId: 'getTransactionHistoryOfSavingAccount'
      parameters:
        - name: accountNumber
          in: path
          description: The account number containing transactions.
          required: true
          schema:
            maxLength: 15
            minLength: 10
            type: integer
            format: int64
        - name: dateFrom
          in: query
          description: The start date.
          schema:
            type: string
        - name: dateTo
          in: query
          description: The end date.
          schema:
            type: string
        - name: skip
          in: query
          description: The records to skip.
          schema:
            type: integer
            format: int32
            default: 0
        - name: take
          in: query
          description: The number of records per page.
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          $ref: '#/components/responses/savingAccountTransactionHistoryResponse'
        '400':
           $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unautherize'
        '404':
          $ref: '#/components/responses/RecordNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
           $ref: '#/components/responses/ServerError'
# fund transfer from source account to destination 

components:
  schemas:
    CheckingAccountTypeResponse:
      $ref: "./schemas/response/checkingAccountTypeResponse.yaml"
    AccountCardResponse:
      $ref: "./schemas/response/accountCardResponse.yaml"
    SavingAccountTypeResponse:
      $ref: "./schemas/response/savingAccountTypeResponse.yaml"
    AccountDetailsResponse:
      $ref: "./schemas/response/accountDetailsResponse.yaml"
    FundTransferResponse:
       $ref: "./schemas/response/fundTransferResponse.yaml"
    TransactionResponse:
      $ref: "./schemas/response/transactionResponse.yaml"
    GetAccountsResponse:
       $ref: "./schemas/response/getAccountsResponse.yaml"
    AccountDetailResponse:
       $ref: "./schemas/response/accountDetailResponse.yaml"
    
    CreateNewAccountRequest:
      $ref: "./schemas/requests/CreateNewAccountRequest.yaml"
    UpdateAccountRequest:
      $ref: "./schemas/requests/UpdateAccountRequest.yaml"
    AccountTransferRequest:
      $ref: "./schemas/requests/AccountTransferRequest.yaml"

    currentAccountTransactionResponse:
      $ref: "./schemas/response/currentAccountTransactionResponse.yaml"
    
    savingAccountTransactionResponse:
      $ref: "./schemas/response/savingAccountTransactionResponse.yaml"

    AccountTransferAccountRequest:
      $ref: "./schemas/requests/AccountTransferFromAccountRequest.yaml"

    AccountTransferToAccountRequest:
      $ref: "./schemas/requests/AccountTransferToAccountRequest.yaml"

    
    ProblemDetails:
      $ref: "./schemas/error/ProblemDetails.yaml"
    ValidationProblemDetails:
       $ref: "./schemas/error/ValidationProblemDetails.yaml"

  parameters:
    customerID:
      $ref: "./parameters/customerID.yaml"
    accountNumber:
      $ref: "./parameters/customerID.yaml"

  responses:
  # HTTP Server Responses
    getAllAccountDetails:
       $ref: "./httpresponse/getaccountAllAccount_200.yaml"
    currentAccountDetails:
      $ref: "./httpresponse/currentAccountResponse_200.yaml"
    SavingAccountResponse:
      $ref: "./httpresponse/savingAccountTypeResponse_200.yaml"
    currentAccountTransactionHistoryResponse:
      $ref: "./httpresponse/currentTransactionHistorySuccessfull_200.yaml"
    savingAccountTransactionHistoryResponse:
      $ref: "./httpresponse/savingTransactionHistorySuccessfull_200.yaml"
    201Response:
       $ref: "./httpresponse/201.yaml"
    Unautherize:
       $ref: "./httpresponse/401.yaml"
    ServerError:
       $ref: "./httpresponse/500.yaml"
    RecordNotFound:
      $ref: "./httpresponse/404.yaml"
    BadRequest:
      $ref: "./httpresponse/400.yaml"
    MethodNotAllowed:
      $ref: "./httpresponse/405.yaml"

# Security Schema for authentication or autherization  
  securitySchemes:
      bearerAuth: # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT
      oAuth2AllGrant:
        type: oauth2
        description: For more information, see https://xxx.com/docs/oauth2/requests
        flows: 
          implicit:
            authorizationUrl: https://xxxx.com/oauth2/authorize
            scopes:
              read: Grant read-only access to all your data except for the account and user info
              write: Grant write-only access to all your data except for the account and user info
              profile: Grant read-only access to the account and user info only
      oAuth2Read:
        type: oauth2
        description: For more information, see https://xxx.com/docs/oauth2/requests
        flows: 
          implicit:
            authorizationUrl: https://xxxx.com/oauth2/authorize
            scopes:
              read: Grant read-only access to all your data except for the account and user info

security:
  - bearerAuth: []
  - oAuth2AllGrant: []
  - oAuth2Read: []
      